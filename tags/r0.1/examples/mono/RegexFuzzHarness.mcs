/* Copyright 2007-2009 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * libregfuzz in C#
 */

using System;
using System.Text.RegularExpressions;

namespace RegexFuzz
{
public class RegexFuzzHarness {

    public static int Main(string[] args){
        if (args.Length < 2) {
          Console.WriteLine("Args: <seed> <length> [<start> [<end>]]");
          return(1);
        }
        int seed = Int32.Parse(args[0]);
        int length = Int32.Parse(args[1]);
        int start = 0, end = 65535;
        if (args.Length == 3) {
          start = Int32.Parse(args[2]);
          end = start;
        } else if (args.Length > 3) {
          start = Int32.Parse(args[2]);
          end = Int32.Parse(args[3]);
        }

        RegexGenerator rg = new RegexGenerator();
        rg.Initialize(seed, length);

        int bad_compile = 0;
        int bad_exec = 0;
        int bad_matcher = 0;
        int matched = 0;
        int unmatched = 0;
        int count = 0;
        string candidate = "";

        if (start != 0) {
          Console.WriteLine("[*] skipping to {0}", start);
          for (;count < start; count++)
            rg.GenerateCandidate();
        }

        Console.WriteLine("[*] running {0} to {1}", start, end);
        for(;count <= end; count++) {
          candidate = rg.GenerateCandidate();

          if ((count % 1024) == 0 || count >= end) {
            Console.WriteLine(
              "[*] seed: {6} count:{0} bad_compile:{1} bad_exec:{2} bad_matcher:{3} matched:{4} unmatched:{5}",
              count, bad_compile, bad_exec, bad_matcher, matched, unmatched, rg.Seed());
            Console.WriteLine("[*] sample: {0}", candidate);
          }

          Regex re;
          try {
            re = new Regex(candidate, new RegexOptions());
            GC.Collect();
            GC.WaitForPendingFinalizers();
          } catch (Exception e) {
            bad_compile++;
            continue;
          }
          bool match;
          try {
            match = re.IsMatch(candidate);
            GC.Collect();
            GC.WaitForPendingFinalizers();
          } catch (Exception e) {
            bad_exec++;
            continue;
          }

          if (match)
            matched++;
          else
            unmatched++;
        }
        Console.WriteLine("[*] done.");
        Console.WriteLine(
          "[*] count:{0} bad_compile:{1} bad_exec:{2} bad_matcher:{3} matched:{4} unmatched:{5}",
          count, bad_compile, bad_exec, bad_matcher, matched, unmatched);
        Console.WriteLine("[*] sample: '{0}'", candidate);
        return(0);
    }
}

}

